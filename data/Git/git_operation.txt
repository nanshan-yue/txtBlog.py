========================================
一、撤销（git reset[回到过去某个提交]）和回滚（git revert[反做后生成新提交]）某个提交的比较
----------------------------------------
1、git reset 撤销提交 （谨慎使用！）
1）git reset <commit> 撤销某个提交后的所有提交，将当前分支指针移动到指定的<commit>

2）git reset --soft <commit>
将提交记录回退到指定的<commit>，但是文件在暂存区（staging area）中的状态不变，文件内容会保留在工作目录。

3）git reset --hard <commit>
彻底删除指定提交及后面的所有提交，并且工作目录的文件也会回到指定提交时的状态。

git reset会修改git的历史记录，相当于“回到过去”，这种操作可能会导致其他协作者遇到问题（比如，合并冲突）。如果使用--hard选项，未提交的更改会丢失，无法恢复！

2、git revert 
创建新的反向提交，保持历史不变，不会丢失数据。
git revert不会删除原来的提交，作用是添加一个新的提交，使得原来提交的改动被撤销。

举例：假设远程仓库的提交历史是这样的：
·提交A：添加了function1
·提交B：修改了function1中的一个bug
·提交C：做了一些小改动，优化了function1（但是引入了问题）

假设发现提交C存在问题，想要撤销。
1）在本地执行 git revert <commit C-hash 提交C的哈希值 >，这时Git在本地生成一个新的提交，称为提交D，内容是撤销提交C中的所有改动。
2）本地操作并未影响远程仓库，然后执行git push origin master，将本地的提交D推送到远程仓库。

Git revert就像是在提交历史中添加一张"撤销通知",即便你通知别人撤销了某个操作，但原来的操作依然存在，撤销只是告诉大家已经修改了这个操作。

========================================

----------------------------------------
========================================

----------------------------------------
========================================

----------------------------------------
========================================

----------------------------------------
========================================

----------------------------------------